char* finacialFunc =
"bool approxEqual(double a, double b)\n"
"{\n"
    "\tif (a == b)\n"
        "\t\treturn true;\n"
    "\tdouble x = a - b;\n"
    "\treturn (x < 0.0 ? -x : x) < ((a < 0.0 ? -a : a) * (1.0 / (16777216.0 *"
    "16777216.0)));\n"
"}\n"
"double constant nKorrVal[] = {0, 9e-1, 9e-2, 9e-3, 9e-4, 9e-5, 9e-6, 9e-7, "
"9e-8,9e-9, 9e-10, 9e-11, 9e-12, 9e-13, 9e-14, 9e-15};\n"
"constant double SCdEpsilon = 1.0E-7;\n"
"double  Round(double fValue)\n"
"{\n"
    "\tif (fValue == 0.0)\n"
    "\t\treturn fValue;\n"
    "\tdouble fFac = 0;\n"
    "\tint nExp;\n"
    "\tif (fValue > 0.0)\n"
        "\t\tnExp = (floor(log10(fValue)));\n"
    "\telse\n"
    "\t\tnExp = 0;\n"
    "\tint nIndex = 15 - nExp;\n"
    "\tif (nIndex > 15)\n"
        "\t\tnIndex = 15;\n"
    "\telse if (nIndex <= 1)\n"
        "\t\tnIndex = 0;\n"
    "\tfValue = floor(fValue + 0.5 + nKorrVal[nIndex]);\n"
    "\treturn fValue;\n"
"}\n"
"void  RateIteration(){\n\tdouble tmp = Round(3.0);\n\treturn;\n}\n"
"double GetRmz( double fZins, double fZzr, double fBw, double fZw, int nF )\n"
"{\n"
    "\tdouble      fRmz;\n"
    "\tif( fZins == 0.0 )\n"
        "\t\tfRmz = ( fBw + fZw ) / fZzr;\n"
    "\telse\n"
        "\t\t{\n"
            "\t\t\tdouble  fTerm = pow( 1.0 + fZins, fZzr );\n"
            "\t\t\tif( nF > 0 )\n"
                      "\t\t\t\tfRmz = ( fZw * fZins / ( fTerm - 1.0 ) + fBw"
                      " * fZins / ( 1.0 - 1.0 / fTerm ) ) / ( 1.0 + fZins );\n"
            "\t\t\telse\n"
            "\t\t\t\tfRmz = fZw * fZins / ( fTerm - 1.0 ) + fBw * fZins /"
            "( 1.0 - 1.0 / fTerm );\n"
        "\t\t}\n"
    "\treturn -fRmz;\n"
"}\n\n"
"double GetZw( double fZins, double fZzr, double fRmz, double fBw, int nF )\n"
"{\n"
"    double      fZw;\n"
"    if( fZins == 0.0 )\n"
"        fZw = fBw + fRmz * fZzr;\n"
"    else\n"
"    {\n"
"        double  fTerm = pow( 1.0 + fZins, fZzr );\n"
"        if( nF > 0 )\n"
"            fZw = fBw * fTerm + fRmz * ( 1.0 + fZins ) *"
"( fTerm - 1.0 ) / fZins;\n"
"        else\n"
"            fZw = fBw * fTerm + fRmz * ( fTerm - 1.0 ) / fZins;\n"
"    }\n"
"    return -fZw;\n"
"}\n\n"
"bool IsLeapYear( int n )\n"
"{\n"
    "return ( (( ( n % 4 ) == 0 ) && ( ( n % 100 ) != 0)) || ( ( n % 400 ) == 0 ) );\n"
"}\n"

"int DaysInMonth( int nMonth, int nYear )\n"
"{\n"
 "   int aDaysInMonth[12] = { 31, 28, 31, 30, 31, 30,\n"
 "                                       31, 31, 30, 31, 30, 31 };\n"
"\n"
"    if ( nMonth != 2 )\n"
"        return aDaysInMonth[nMonth-1];\n"
"    else\n"
"    {\n"
"        if ( IsLeapYear(nYear) )\n"
"            return aDaysInMonth[nMonth-1] + 1;\n"
"        else\n"
"            return aDaysInMonth[nMonth-1];\n"
"    }\n"
"}\n"

"void DaysToDate( int nDays, int *rDay, int* rMonth, int* rYear )\n"
"{\n"
"\n"
"    int   nTempDays;\n"
"    int   i = 0;\n"
"    bool    bCalc;\n"

"    do\n"
"    {\n"
"        nTempDays = nDays;\n"
"        *rYear = (int)((nTempDays / 365) - i);\n"
"        nTempDays -= ((int) *rYear -1) * 365;\n"
"        nTempDays -= (( *rYear -1) / 4) - (( *rYear -1) / 100) + ((*rYear -1) / 400);\n"
"        bCalc = false;\n"
"        if ( nTempDays < 1 )\n"
"        {\n"
"            i++;\n"
"            bCalc = true;\n"
"        }\n"
"        else\n"
"        {\n"
"            if ( nTempDays > 365 )\n"
"            {\n"
"                if ( (nTempDays != 366) || !IsLeapYear( *rYear ) )\n"
"                {\n"
"                    i--;\n"
"                    bCalc = true;\n"
"                }\n"
"            }\n"
"        }\n"
"    }\n"
"    while ( bCalc );\n"

"    *rMonth = 1;\n"
"    while ( (int)nTempDays > DaysInMonth( *rMonth, *rYear ) )\n"
"    {\n"
"        nTempDays -= DaysInMonth( *rMonth, *rYear );\n"
"        *rMonth+=1;\n"
"    }\n"
"    *rDay = (int)nTempDays;\n"
"}\n"

"int  DateToDays( int nDay, int nMonth, int nYear )\n"
"{\n"
"    int nDays = ((int)nYear-1) * 365;\n"
"    nDays += ((nYear-1) / 4) - ((nYear-1) / 100) + ((nYear-1) / 400);\n"

"    for( int i = 1; i < nMonth; i++ )\n"
"        nDays += DaysInMonth(i,nYear);\n"
"    nDays += nDay;\n"
"\n"
"    return nDays;\n"
"}\n"
"int GetNullDate()\n"
"{\n"
"     return DateToDays(30,12,1899 );\n"
"}\n"

"double GetYearFrac( int nNullDate, int nStartDate, int nEndDate, int nMode ) \n"
"{\n"
"    if( nStartDate == nEndDate )\n"
"        return 0.0;     \n"

 "   if( nStartDate > nEndDate )\n"
 "   {\n"
 "       int   n = nEndDate;\n"
 "       nEndDate = nStartDate;\n"
 "       nStartDate = n;\n"
 "   }\n"

  "  int nDate1 = nStartDate + nNullDate;\n"
  "  int nDate2 = nEndDate + nNullDate;\n"

  "  int  nDay1, nDay2;\n"
  "  int  nMonth1, nMonth2;\n"
  "  int  nYear1, nYear2;\n"

  "  DaysToDate( nDate1, &nDay1, &nMonth1, &nYear1 );\n"
  "  DaysToDate( nDate2, &nDay2, &nMonth2, &nYear2 );\n"

    
  "  int nDayDiff;\n"
  "  switch( nMode )\n"
  "  {\n"
  "      case 0:         \n"
  "          if ( nDay1 == 31 )\n"
  "          {\n"
  "              nDay1--;\n"
  "          }\n"
  "          if ( nDay1 == 30 && nDay2 == 31 )\n"
  "          {\n"
  "              nDay2--;\n"
  "          }\n"
  "          else\n"
  "          {\n"
  "              if ( nMonth1 == 2 && nDay1 == ( IsLeapYear( nYear1 ) ? 29 : 28 ) )\n"
  "              {\n"
  "                  nDay1 = 30;\n"
  "                  if ( nMonth2 == 2 && nDay2 == ( IsLeapYear( nYear2 ) ? 29 : 28 ) )\n"
  "                  {\n"
  "                      nDay2 = 30;\n"
  "                  }\n"
  "              }\n"
  "          }\n"
  "          nDayDiff = ( nYear2 - nYear1 ) * 360 + ( nMonth2 - nMonth1 ) * 30 + ( nDay2 - nDay1 );\n"
  "          break;\n"
  "      case 1:         \n"
  "      case 2:        \n"
  "      case 3:         \n"
  "         nDayDiff = nDate2 - nDate1;\n"
  "          break;\n"
  "      case 4:         \n"
  "          if ( nDay1 == 31 )\n"
  "          {\n"
  "              nDay1--;\n"
  "          }\n"
  "          if ( nDay2 == 31 )\n"
  "          {\n"
  "              nDay2--;\n"
  "          }\n"
  "          nDayDiff = ( nYear2 - nYear1 ) * 360 + ( nMonth2 - nMonth1 ) * 30 + ( nDay2 - nDay1 );\n"
  "          break;\n"
  "  }\n"

 
  "  double nDaysInYear;\n"
  "  switch( nMode )\n"
  "  {\n"
  "      case 0:         \n"
  "      case 2:         \n"
  "      case 4:         \n"
  "          nDaysInYear = 360;\n"
  "          break;\n"
  "      case 1:         \n"
  "          {\n"
  "              bool isYearDifferent = ( nYear1 != nYear2 );\n"
  "              if ( isYearDifferent &&\n"
  "                   ( ( nYear2 != nYear1 + 1 ) ||\n"
  "                     ( nMonth1 < nMonth2 ) ||\n"
  "                     ( nMonth1 == nMonth2 && nDay1 < nDay2 ) ) )\n"
  "              {\n"
           
  "                  int nDayCount = 0;\n"
   "                 for ( int i = nYear1; i <= nYear2; i++ )\n"
  "                      nDayCount += ( IsLeapYear( i ) ? 366 : 365 );\n"

  "                  nDaysInYear = ( double ) nDayCount / ( double ) ( nYear2 - nYear1 + 1 );\n"
  "              }\n"
   "             else\n"
  "              {\n"
  "                  if ( isYearDifferent && IsLeapYear( nYear1 ) )\n"
  "                  {\n"
  "                      nDaysInYear = 366;\n"
  "                  }\n"
 "                   else\n"
  "                  {\n"
                   
  "                      if ( ( IsLeapYear( nYear1 ) && nMonth1 <= 2 && nDay1 <= 29 ) ||\n"
  "                           ( IsLeapYear( nYear2 ) && ( nMonth2 > 3 || ( nMonth2 == 2 && nDay1 == 29 ) ) ) )\n"
   "                     {\n"
   "                         nDaysInYear = 366;\n"
   "                     }\n"
  "                      else\n"
  "                      {\n"
  "                          nDaysInYear = 365;\n"
 "                           for ( int i = nYear1; i <= nYear2; i++ )\n"
  "                          {\n"
   "                             if ( IsLeapYear( i ) )\n"
  "                              {\n"
  "                                  nDaysInYear = 366;\n"
   "                                 break;\n"
   "                             }\n"
  "                          }\n"
   "                     }\n"
   "                 }\n"
   "             }\n"
   "         }\n"
  "          break;\n"
  "      case 3:         \n"
  "          nDaysInYear = 365;\n"
 "           break;\n"

  "  }\n"

  "  return (double)( nDayDiff ) / (nDaysInYear);\n"
"}\n"
"int GetDiffDate( int nNullDate, int nStartDate, int nEndDate, int nMode,"
"    int* pOptDaysIn1stYear )\n"
"{\n"
"\t   bool    bNeg = nStartDate > nEndDate;\n"

"\t    if( bNeg )\n"
"\t    {\n"
"\t\t        int   n = nEndDate;\n"
"\t\t        nEndDate = nStartDate;\n"
"\t\t        nStartDate = n;\n"
"\t    }\n"
"\t    int       nRet;\n"
"\t    switch( nMode )\n"
"\t    {\n"
"\t\t       case 0:   \n"
"\t\t       case 4:   \n"
"\t\t            {\n"
"\t\t\t            int      nD1, nM1, nY1, nD2, nM2, nY2;\n"
"\t\t\t            nStartDate += nNullDate;\n"
"\t\t\t            nEndDate += nNullDate;\n"
"\t\t\t            DaysToDate( nStartDate, &nD1, &nM1, &nY1 );\n"
"\t\t\t            DaysToDate( nEndDate, &nD2, &nM2, &nY2 );\n"
"\t\t\t            bool        bLeap = IsLeapYear( nY1 );\n"
"\t\t\t            int       nDays, nMonths;\n"
"\t\t\t            nMonths = nM2 - nM1;\n"
"\t\t\t            nDays = nD2 - nD1;\n"
"\t\t\t            nMonths += ( nY2 - nY1 ) * 12;\n"
"\t\t\t            nRet = nMonths * 30 + nDays;\n"
"\t\t\t            if( nMode == 0 && nM1 == 2 && nM2 != 2 && nY1 == nY2 )\n"
"\t\t\t\t                nRet -= bLeap? 1 : 2;\n"
"\t\t\t            if( pOptDaysIn1stYear )\n"
"\t\t\t\t                *pOptDaysIn1stYear = 360;\n"
"\t\t            }\n"
"\t\t\t           break;\n"
"\t\t        case 1:    \n"
"\t\t\t           if( pOptDaysIn1stYear )\n"
"\t\t\t            {\n"
"\t\t\t\t                int      nD, nM, nY;\n"
"\t\t\t\t                DaysToDate( nStartDate + nNullDate, &nD, &nM, &nY );\n"
"\t\t\t\t                *pOptDaysIn1stYear = IsLeapYear( nY )? 366 : 365;\n"
"\t\t\t           }\n"
"\t\t\t            nRet = nEndDate - nStartDate;\n"
"\t\t\t            break;\n"
"\t\t        case 2:      \n"
"\t\t\t            nRet = nEndDate - nStartDate;\n"
"\t\t\t            if( pOptDaysIn1stYear )\n"
"\t\t\t\t                *pOptDaysIn1stYear = 360;\n"
"\t\t\t            break;\n"
"\t\t        case 3:        \n"
"\t\t\t            nRet = nEndDate - nStartDate;\n"
"\t\t\t            if( pOptDaysIn1stYear )\n"
"\t\t\t\t                *pOptDaysIn1stYear = 365;\n"
"\t\t\t            break;\n"
"\t    }\n"
"\t    return bNeg? -nRet : nRet;\n"
"}\n"
"double GetYearDiff( int nNullDate, int nStartDate, int nEndDate, int nMode )\n"
"{\n"
"\t    int   nDays1stYear;\n"
"\t    int   nTotalDays = GetDiffDate( nNullDate, nStartDate, nEndDate, nMode, &nDays1stYear );\n"
"\t    double result=(double)(nTotalDays)/(nDays1stYear);\n"
"\t	return result;\n"
"}\n"
"int GetDiffDate360_(\n"
"                int nDay1, int nMonth1, int nYear1, bool bLeapYear1,\n"
"                int nDay2, int nMonth2, int nYear2,\n"
"                bool bUSAMethod )\n"
"{\n"
"    if( nDay1 == 31 )\n"
"        nDay1--;\n"
"    else if( bUSAMethod && ( nMonth1 == 2 && ( nDay1 == 29 || ( nDay1 == 28 && !bLeapYear1 ) ) ) )\n"
"            nDay1 = 30;\n"
"    if( nDay2 == 31 )\n"
"    {\n"
"        if( bUSAMethod && nDay1 != 30 )\n"
"        {\n"
"            nDay2 = 1;\n"
"            if( nMonth2 == 12 )\n"
"            {\n"
"                nYear2++;\n"
"                nMonth2 = 1;\n"
"            }\n"
"            else\n"
"                nMonth2++;\n"
"        }\n"
"        else\n"
"            nDay2 = 30;\n"
"    }\n"
"    return nDay2 + nMonth2 * 30 + nYear2 * 360 - nDay1 - nMonth1 * 30 - nYear1 * 360;\n"
"}\n"

"int GetDiffDate360( int nNullDate, int nDate1, int nDate2, bool bUSAMethod )\n"
"{\n"
"    nDate1 += nNullDate;\n"
"    nDate2 += nNullDate;\n"
"    int nDay1, nMonth1, nYear1, nDay2, nMonth2, nYear2;\n"
"    DaysToDate( nDate1, &nDay1, &nMonth1, &nYear1 );\n"
"    DaysToDate( nDate2, &nDay2, &nMonth2, &nYear2 );\n"
"    return GetDiffDate360_( nDay1, nMonth1, nYear1, IsLeapYear( nYear1 ), nDay2, nMonth2, nYear2, bUSAMethod );\n"
"}\n";

