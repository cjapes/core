char* finacialFunc =
"bool approxEqual(double a, double b)\n"
"{\n"
    "\tif (a == b)\n"
        "\t\treturn true;\n"
    "\tdouble x = a - b;\n"
    "\treturn (x < 0.0 ? -x : x) < ((a < 0.0 ? -a : a) * (1.0 / (16777216.0 *"
    "16777216.0)));\n"
"}\n"
"double constant nKorrVal[] = {0, 9e-1, 9e-2, 9e-3, 9e-4, 9e-5, 9e-6, 9e-7, "
"9e-8,9e-9, 9e-10, 9e-11, 9e-12, 9e-13, 9e-14, 9e-15};\n"
"constant double SCdEpsilon = 1.0E-7;\n"
"double  Round(double fValue)\n"
"{\n"
    "\tif (fValue == 0.0)\n"
    "\t\treturn fValue;\n"
    "\tdouble fFac = 0;\n"
    "\tint nExp;\n"
    "\tif (fValue > 0.0)\n"
        "\t\tnExp = (floor(log10(fValue)));\n"
    "\telse\n"
    "\t\tnExp = 0;\n"
    "\tint nIndex = 15 - nExp;\n"
    "\tif (nIndex > 15)\n"
        "\t\tnIndex = 15;\n"
    "\telse if (nIndex <= 1)\n"
        "\t\tnIndex = 0;\n"
    "\tfValue = floor(fValue + 0.5 + nKorrVal[nIndex]);\n"
    "\treturn fValue;\n"
"}\n"
"void  RateIteration(){\n\tdouble tmp = Round(3.0);\n\treturn;\n}\n"
"double GetRmz( double fZins, double fZzr, double fBw, double fZw, int nF )\n"
"{\n"
    "\tdouble      fRmz;\n"
    "\tif( fZins == 0.0 )\n"
        "\t\tfRmz = ( fBw + fZw ) / fZzr;\n"
    "\telse\n"
        "\t\t{\n"
            "\t\t\tdouble  fTerm = pow( 1.0 + fZins, fZzr );\n"
            "\t\t\tif( nF > 0 )\n"
                      "\t\t\t\tfRmz = ( fZw * fZins / ( fTerm - 1.0 ) + fBw"
                      " * fZins / ( 1.0 - 1.0 / fTerm ) ) / ( 1.0 + fZins );\n"
            "\t\t\telse\n"
            "\t\t\t\tfRmz = fZw * fZins / ( fTerm - 1.0 ) + fBw * fZins /"
            "( 1.0 - 1.0 / fTerm );\n"
        "\t\t}\n"
    "\treturn -fRmz;\n"
"}\n\n"
"double GetZw( double fZins, double fZzr, double fRmz, double fBw, int nF )\n"
"{\n"
"    double      fZw;\n"
"    if( fZins == 0.0 )\n"
"        fZw = fBw + fRmz * fZzr;\n"
"    else\n"
"    {\n"
"        double  fTerm = pow( 1.0 + fZins, fZzr );\n"
"        if( nF > 0 )\n"
"            fZw = fBw * fTerm + fRmz * ( 1.0 + fZins ) *"
"( fTerm - 1.0 ) / fZins;\n"
"        else\n"
"            fZw = fBw * fTerm + fRmz * ( fTerm - 1.0 ) / fZins;\n"
"    }\n"
"    return -fZw;\n"
"}\n\n";
